//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.03.07 at 09:35:42 AM CET 
//


package net.ivoa.parameter.visitor;

import net.ivoa.parameter.model.AbstractCondition;
import net.ivoa.parameter.model.AbstractCriterion;
import net.ivoa.parameter.model.Always;
import net.ivoa.parameter.model.AlwaysConditionalStatement;
import net.ivoa.parameter.model.And;
import net.ivoa.parameter.model.AtomicConstantExpression;
import net.ivoa.parameter.model.AtomicParameterExpression;
import net.ivoa.parameter.model.BelongToSet;
import net.ivoa.parameter.model.ConditionalClause;
import net.ivoa.parameter.model.ConditionalStatement;
import net.ivoa.parameter.model.ConstraintOnGroup;
import net.ivoa.parameter.model.Criterion;
import net.ivoa.parameter.model.DefaultValue;
import net.ivoa.parameter.model.Description;
import net.ivoa.parameter.model.Expression;
import net.ivoa.parameter.model.Function;
import net.ivoa.parameter.model.FunctionExpression;
import net.ivoa.parameter.model.If;
import net.ivoa.parameter.model.IfThenConditionalStatement;
import net.ivoa.parameter.model.IsInteger;
import net.ivoa.parameter.model.IsNull;
import net.ivoa.parameter.model.IsRational;
import net.ivoa.parameter.model.IsReal;
import net.ivoa.parameter.model.LogicalConnector;
import net.ivoa.parameter.model.MinMaxArgument;
import net.ivoa.parameter.model.MinMaxFunctionExpression;
import net.ivoa.parameter.model.Operation;
import net.ivoa.parameter.model.Or;
import net.ivoa.parameter.model.ParameterGroup;
import net.ivoa.parameter.model.ParameterReference;
import net.ivoa.parameter.model.Parameters;
import net.ivoa.parameter.model.ParenthesisContent;
import net.ivoa.parameter.model.ParenthesisCriterion;
import net.ivoa.parameter.model.Service;
import net.ivoa.parameter.model.SingleParameter;
import net.ivoa.parameter.model.Then;
import net.ivoa.parameter.model.ValueDifferentFrom;
import net.ivoa.parameter.model.ValueInRange;
import net.ivoa.parameter.model.ValueLargerThan;
import net.ivoa.parameter.model.ValueSmallerThan;

public class DepthFirstTraverserImpl
    implements Traverser
{


    public void traverse(AbstractCondition aBean, Visitor aVisitor) {
    }

    public void traverse(AbstractCriterion aBean, Visitor aVisitor) {
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
        if (aBean.getConditionType()!= null) {
            aBean.getConditionType().accept(aVisitor);
        }
        if (aBean.getLogicalConnector()!= null) {
            aBean.getLogicalConnector().accept(aVisitor);
        }
    }

    public void traverse(Always aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(AlwaysConditionalStatement aBean, Visitor aVisitor) {
        if (aBean.getAlways()!= null) {
            aBean.getAlways().accept(aVisitor);
        }
    }

    public void traverse(And aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(AtomicConstantExpression aBean, Visitor aVisitor) {
        if (aBean.getPower()!= null) {
            aBean.getPower().accept(aVisitor);
        }
        if (aBean.getOperation()!= null) {
            aBean.getOperation().accept(aVisitor);
        }
    }

    public void traverse(AtomicParameterExpression aBean, Visitor aVisitor) {
        if (aBean.getParameterRef()!= null) {
            aBean.getParameterRef().accept(aVisitor);
        }
        if (aBean.getPower()!= null) {
            aBean.getPower().accept(aVisitor);
        }
        if (aBean.getOperation()!= null) {
            aBean.getOperation().accept(aVisitor);
        }
    }

    public void traverse(BelongToSet aBean, Visitor aVisitor) {
        for (Expression bean: aBean.getValue()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(ConditionalClause aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(ConditionalStatement aBean, Visitor aVisitor) {
    }

    public void traverse(ConstraintOnGroup aBean, Visitor aVisitor) {
        for (ConditionalStatement bean: aBean.getConditionalStatement()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(Criterion aBean, Visitor aVisitor) {
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
        if (aBean.getConditionType()!= null) {
            aBean.getConditionType().accept(aVisitor);
        }
        if (aBean.getLogicalConnector()!= null) {
            aBean.getLogicalConnector().accept(aVisitor);
        }
    }

    public void traverse(DefaultValue aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(Description aBean, Visitor aVisitor) {
    }

    public void traverse(Expression aBean, Visitor aVisitor) {
    }

    public void traverse(Function aBean, Visitor aVisitor) {
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
    }

    public void traverse(FunctionExpression aBean, Visitor aVisitor) {
        if (aBean.getFunction()!= null) {
            aBean.getFunction().accept(aVisitor);
        }
        if (aBean.getPower()!= null) {
            aBean.getPower().accept(aVisitor);
        }
        if (aBean.getOperation()!= null) {
            aBean.getOperation().accept(aVisitor);
        }
    }

    public void traverse(If aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(IfThenConditionalStatement aBean, Visitor aVisitor) {
        if (aBean.getIf()!= null) {
            aBean.getIf().accept(aVisitor);
        }
        if (aBean.getThen()!= null) {
            aBean.getThen().accept(aVisitor);
        }
    }

    public void traverse(IsInteger aBean, Visitor aVisitor) {
    }

    public void traverse(IsNull aBean, Visitor aVisitor) {
    }

    public void traverse(IsRational aBean, Visitor aVisitor) {
    }

    public void traverse(IsReal aBean, Visitor aVisitor) {
    }

    public void traverse(LogicalConnector aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(MinMaxArgument aBean, Visitor aVisitor) {
        for (ParameterReference bean: aBean.getParameterRef()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(MinMaxFunctionExpression aBean, Visitor aVisitor) {
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
        if (aBean.getPower()!= null) {
            aBean.getPower().accept(aVisitor);
        }
        if (aBean.getOperation()!= null) {
            aBean.getOperation().accept(aVisitor);
        }
    }

    public void traverse(Operation aBean, Visitor aVisitor) {
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
    }

    public void traverse(Or aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(ParameterGroup aBean, Visitor aVisitor) {
        for (ParameterReference bean: aBean.getParameterRef()) {
            bean.accept(aVisitor);
        }
        if (aBean.getConstraintOnGroup()!= null) {
            aBean.getConstraintOnGroup().accept(aVisitor);
        }
        for (ParameterGroup bean: aBean.getParameterGroup()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(ParameterReference aBean, Visitor aVisitor) {
    }

    public void traverse(Parameters aBean, Visitor aVisitor) {
        for (SingleParameter bean: aBean.getParameter()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(ParenthesisContent aBean, Visitor aVisitor) {
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
        if (aBean.getPower()!= null) {
            aBean.getPower().accept(aVisitor);
        }
        if (aBean.getOperation()!= null) {
            aBean.getOperation().accept(aVisitor);
        }
    }

    public void traverse(ParenthesisCriterion aBean, Visitor aVisitor) {
        if (aBean.getExternalLogicalConnector()!= null) {
            aBean.getExternalLogicalConnector().accept(aVisitor);
        }
        if (aBean.getExpression()!= null) {
            aBean.getExpression().accept(aVisitor);
        }
        if (aBean.getConditionType()!= null) {
            aBean.getConditionType().accept(aVisitor);
        }
        if (aBean.getLogicalConnector()!= null) {
            aBean.getLogicalConnector().accept(aVisitor);
        }
    }

    public void traverse(Service aBean, Visitor aVisitor) {
        if (aBean.getParameters()!= null) {
            aBean.getParameters().accept(aVisitor);
        }
        if (aBean.getInputs()!= null) {
            aBean.getInputs().accept(aVisitor);
        }
        if (aBean.getOutputs()!= null) {
            aBean.getOutputs().accept(aVisitor);
        }
    }

    public void traverse(SingleParameter aBean, Visitor aVisitor) {
        if (aBean.getPrecision()!= null) {
            aBean.getPrecision().accept(aVisitor);
        }
        if (aBean.getDimension()!= null) {
            aBean.getDimension().accept(aVisitor);
        }
    }

    public void traverse(Then aBean, Visitor aVisitor) {
        if (aBean.getCriterion()!= null) {
            aBean.getCriterion().accept(aVisitor);
        }
    }

    public void traverse(ValueDifferentFrom aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(ValueInRange aBean, Visitor aVisitor) {
        if (aBean.getSup()!= null) {
            aBean.getSup().accept(aVisitor);
        }
        if (aBean.getInf()!= null) {
            aBean.getInf().accept(aVisitor);
        }
    }

    public void traverse(ValueLargerThan aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(ValueSmallerThan aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

}
