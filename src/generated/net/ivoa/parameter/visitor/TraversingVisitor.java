//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.12.17 at 10:02:33 AM CET 
//


package net.ivoa.parameter.visitor;

import net.ivoa.parameter.model.AbstractCondition;
import net.ivoa.parameter.model.AbstractCriterion;
import net.ivoa.parameter.model.Always;
import net.ivoa.parameter.model.AlwaysConditionalStatement;
import net.ivoa.parameter.model.And;
import net.ivoa.parameter.model.AtomicConstantExpression;
import net.ivoa.parameter.model.AtomicParameterExpression;
import net.ivoa.parameter.model.BelongToSet;
import net.ivoa.parameter.model.ConditionalClause;
import net.ivoa.parameter.model.ConditionalStatement;
import net.ivoa.parameter.model.ConstraintOnGroup;
import net.ivoa.parameter.model.Criterion;
import net.ivoa.parameter.model.DefaultValue;
import net.ivoa.parameter.model.Description;
import net.ivoa.parameter.model.Expression;
import net.ivoa.parameter.model.Function;
import net.ivoa.parameter.model.FunctionExpression;
import net.ivoa.parameter.model.If;
import net.ivoa.parameter.model.IfThenConditionalStatement;
import net.ivoa.parameter.model.IsInteger;
import net.ivoa.parameter.model.IsNull;
import net.ivoa.parameter.model.IsRational;
import net.ivoa.parameter.model.IsReal;
import net.ivoa.parameter.model.LogicalConnector;
import net.ivoa.parameter.model.MinMaxArgument;
import net.ivoa.parameter.model.MinMaxFunctionExpression;
import net.ivoa.parameter.model.Operation;
import net.ivoa.parameter.model.Or;
import net.ivoa.parameter.model.ParameterGroup;
import net.ivoa.parameter.model.ParameterReference;
import net.ivoa.parameter.model.Parameters;
import net.ivoa.parameter.model.ParenthesisContent;
import net.ivoa.parameter.model.ParenthesisCriterion;
import net.ivoa.parameter.model.Service;
import net.ivoa.parameter.model.SingleParameter;
import net.ivoa.parameter.model.Then;
import net.ivoa.parameter.model.ValueDifferentFrom;
import net.ivoa.parameter.model.ValueInRange;
import net.ivoa.parameter.model.ValueLargerThan;
import net.ivoa.parameter.model.ValueSmallerThan;
import net.ivoa.xml.pdlserver.v0.ClientServerCommunication;
import net.ivoa.xml.pdlserver.v0.Error;
import net.ivoa.xml.pdlserver.v0.Job;
import net.ivoa.xml.pdlserver.v0.PDLService;
import net.ivoa.xml.pdlserver.v0.Parameter;
import net.ivoa.xml.pdlserver.v0.Result;
import net.ivoa.xml.pdlserver.v0.User;

public class TraversingVisitor
    implements Visitor
{

    private Visitor visitor;
    private Traverser traverser;
    private TraversingVisitorProgressMonitor progressMonitor;

    public TraversingVisitor(Traverser aTraverser, Visitor aVisitor) {
        traverser = aTraverser;
        visitor = aVisitor;
    }

    public Visitor getVisitor() {
        return visitor;
    }

    public void setVisitor(Visitor aVisitor) {
        visitor = aVisitor;
    }

    public Traverser getTraverser() {
        return traverser;
    }

    public void setTraverser(Traverser aVisitor) {
        traverser = aVisitor;
    }

    public TraversingVisitorProgressMonitor getProgressMonitor() {
        return progressMonitor;
    }

    public void setProgressMonitor(TraversingVisitorProgressMonitor aVisitor) {
        progressMonitor = aVisitor;
    }

    public void visit(AbstractCondition aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(AbstractCriterion aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Always aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(AlwaysConditionalStatement aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(And aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(AtomicConstantExpression aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(AtomicParameterExpression aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(BelongToSet aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ConditionalClause aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ConditionalStatement aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ConstraintOnGroup aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Criterion aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(DefaultValue aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Description aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Expression aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Function aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(FunctionExpression aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(If aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(IfThenConditionalStatement aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(IsInteger aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(IsNull aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(IsRational aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(IsReal aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(LogicalConnector aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(MinMaxArgument aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(MinMaxFunctionExpression aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Operation aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Or aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ParameterGroup aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ParameterReference aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Parameters aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ParenthesisContent aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ParenthesisCriterion aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Service aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(SingleParameter aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Then aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ValueDifferentFrom aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ValueInRange aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ValueLargerThan aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ValueSmallerThan aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(ClientServerCommunication aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Error aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Job aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(PDLService aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Parameter aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(Result aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

    public void visit(User aBean) {
        aBean.accept(getVisitor());
        if (progressMonitor!= null) {
            progressMonitor.visited(aBean);
        }
        getTraverser().traverse(aBean, this);
        if (progressMonitor!= null) {
            progressMonitor.traversed(aBean);
        }
    }

}
