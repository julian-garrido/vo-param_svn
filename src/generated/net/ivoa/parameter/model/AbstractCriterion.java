//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.11.30 at 11:30:13 AM CET 
//


package net.ivoa.parameter.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.ivoa.parameter.visitor.Visitable;
import net.ivoa.parameter.visitor.Visitor;


/**
 * <p>Java class for AbstractCriterion complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractCriterion">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Expression" type="{http://www.ivoa.net/xml/Parameter/v0.1}Expression"/>
 *         &lt;element name="ConditionType" type="{http://www.ivoa.net/xml/Parameter/v0.1}AbstractCondition"/>
 *         &lt;element name="LogicalConnector" type="{http://www.ivoa.net/xml/Parameter/v0.1}LogicalConnector" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractCriterion", propOrder = {
    "expression",
    "conditionType",
    "logicalConnector"
})
@XmlSeeAlso({
    ParenthesisCriterion.class,
    Criterion.class
})
public abstract class AbstractCriterion implements Visitable
{

    @XmlElement(name = "Expression", required = true)
    protected Expression expression;
    @XmlElement(name = "ConditionType", required = true)
    protected AbstractCondition conditionType;
    @XmlElement(name = "LogicalConnector")
    protected LogicalConnector logicalConnector;

    /**
     * Default no-arg constructor
     * 
     */
    public AbstractCriterion() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public AbstractCriterion(final Expression expression, final AbstractCondition conditionType, final LogicalConnector logicalConnector) {
        this.expression = expression;
        this.conditionType = conditionType;
        this.logicalConnector = logicalConnector;
    }

    /**
     * Gets the value of the expression property.
     * 
     * @return
     *     possible object is
     *     {@link Expression }
     *     
     */
    public Expression getExpression() {
        return expression;
    }

    /**
     * Sets the value of the expression property.
     * 
     * @param value
     *     allowed object is
     *     {@link Expression }
     *     
     */
    public void setExpression(Expression value) {
        this.expression = value;
    }

    /**
     * Gets the value of the conditionType property.
     * 
     * @return
     *     possible object is
     *     {@link AbstractCondition }
     *     
     */
    public AbstractCondition getConditionType() {
        return conditionType;
    }

    /**
     * Sets the value of the conditionType property.
     * 
     * @param value
     *     allowed object is
     *     {@link AbstractCondition }
     *     
     */
    public void setConditionType(AbstractCondition value) {
        this.conditionType = value;
    }

    /**
     * Gets the value of the logicalConnector property.
     * 
     * @return
     *     possible object is
     *     {@link LogicalConnector }
     *     
     */
    public LogicalConnector getLogicalConnector() {
        return logicalConnector;
    }

    /**
     * Sets the value of the logicalConnector property.
     * 
     * @param value
     *     allowed object is
     *     {@link LogicalConnector }
     *     
     */
    public void setLogicalConnector(LogicalConnector value) {
        this.logicalConnector = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public AbstractCriterion withExpression(Expression value) {
        setExpression(value);
        return this;
    }

    public AbstractCriterion withConditionType(AbstractCondition value) {
        setConditionType(value);
        return this;
    }

    public AbstractCriterion withLogicalConnector(LogicalConnector value) {
        setLogicalConnector(value);
        return this;
    }

}
