//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.12.17 at 10:02:33 AM CET 
//


package net.ivoa.parameter.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FunctionType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FunctionType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="size"/>
 *     &lt;enumeration value="abs"/>
 *     &lt;enumeration value="sin"/>
 *     &lt;enumeration value="cos"/>
 *     &lt;enumeration value="tan"/>
 *     &lt;enumeration value="asin"/>
 *     &lt;enumeration value="acos"/>
 *     &lt;enumeration value="atan"/>
 *     &lt;enumeration value="exp"/>
 *     &lt;enumeration value="log"/>
 *     &lt;enumeration value="sum"/>
 *     &lt;enumeration value="product"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "FunctionType")
@XmlEnum
public enum FunctionType {

    @XmlEnumValue("size")
    SIZE("size"),
    @XmlEnumValue("abs")
    ABS("abs"),
    @XmlEnumValue("sin")
    SIN("sin"),
    @XmlEnumValue("cos")
    COS("cos"),
    @XmlEnumValue("tan")
    TAN("tan"),
    @XmlEnumValue("asin")
    ASIN("asin"),
    @XmlEnumValue("acos")
    ACOS("acos"),
    @XmlEnumValue("atan")
    ATAN("atan"),
    @XmlEnumValue("exp")
    EXP("exp"),
    @XmlEnumValue("log")
    LOG("log"),
    @XmlEnumValue("sum")
    SUM("sum"),
    @XmlEnumValue("product")
    PRODUCT("product");
    private final String value;

    FunctionType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FunctionType fromValue(String v) {
        for (FunctionType c: FunctionType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
